"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_aircraft_tracking_LeafletMap_tsx",{

/***/ "./pages/api/opensky.ts":
/*!******************************!*\
  !*** ./pages/api/opensky.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenSkyService: () => (/* binding */ OpenSkyService),\n/* harmony export */   openSkyService: () => (/* binding */ openSkyService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ \"./node_modules/ws/browser.js\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ws__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-cache */ \"./node_modules/node-cache/index.js\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_1__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\nconst RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY = 2000;\nconst WS_RECONNECT_DELAY = 5000;\nconst API_ENDPOINTS = [\n    'https://opensky-network.org/api',\n    'https://api.opensky-network.org'\n];\n// OpenSky API state vector array indices\nconst ICAO24_INDEX = 0;\nconst LONGITUDE_INDEX = 5;\nconst LATITUDE_INDEX = 6;\nconst ALTITUDE_INDEX = 13; // baro_altitude\nconst VELOCITY_INDEX = 9; // velocity\nconst HEADING_INDEX = 10; // true_track\nconst ON_GROUND_INDEX = 8;\nconst LAST_CONTACT_INDEX = 4;\nclass OpenSkyService {\n    async retryOperation(operation) {\n        let lastError = null;\n        for(let attempt = 1; attempt <= RETRY_ATTEMPTS; attempt++){\n            try {\n                return await operation();\n            } catch (error) {\n                lastError = error;\n                console.error(\"Attempt \".concat(attempt, \" failed:\"), error);\n                if (attempt < RETRY_ATTEMPTS) {\n                    this.currentEndpointIndex = (this.currentEndpointIndex + 1) % API_ENDPOINTS.length;\n                    await new Promise((resolve)=>setTimeout(resolve, RETRY_DELAY * attempt));\n                }\n            }\n        }\n        throw lastError || new Error('Operation failed after retries');\n    }\n    getCurrentEndpoint() {\n        return API_ENDPOINTS[this.currentEndpointIndex];\n    }\n    initWebSocket() {\n        if (this.ws || !this.isWebSocketEnabled) return;\n        try {\n            const encodedUsername = encodeURIComponent(this.username);\n            const encodedPassword = encodeURIComponent(this.password);\n            const wsUrl = \"wss://opensky-network.org/api/websocket/auth?username=\".concat(encodedUsername, \"&password=\").concat(encodedPassword);\n            console.log('Initializing WebSocket connection...');\n            this.ws = new (ws__WEBPACK_IMPORTED_MODULE_0___default())(wsUrl);\n            this.ws.on('open', ()=>{\n                var _this_ws;\n                console.log('WebSocket connection established');\n                this.wsReconnectAttempts = 0;\n                if (this.reconnectTimeout) {\n                    clearTimeout(this.reconnectTimeout);\n                    this.reconnectTimeout = null;\n                }\n                if (((_this_ws = this.ws) === null || _this_ws === void 0 ? void 0 : _this_ws.readyState) === (ws__WEBPACK_IMPORTED_MODULE_0___default().OPEN)) {\n                    this.subscribeToUpdates();\n                }\n            });\n            this.ws.on('message', this.handleWebSocketMessage.bind(this));\n            this.ws.on('close', ()=>{\n                console.log('WebSocket connection closed');\n                this.handleWebSocketClose();\n            });\n            this.ws.on('error', (error)=>{\n                console.error('WebSocket error:', error);\n                this.handleWebSocketError(error);\n            });\n        } catch (error) {\n            console.error('Failed to initialize WebSocket:', error);\n            this.handleWebSocketError(error);\n        }\n    }\n    handleWebSocketMessage(data) {\n        try {\n            const positions = JSON.parse(data.toString());\n            this.broadcastPositions(positions);\n            this.updateCache(positions);\n        } catch (error) {\n            console.error('Error processing WebSocket message:', error);\n        }\n    }\n    handleWebSocketClose() {\n        this.ws = null;\n        if (this.isWebSocketEnabled) {\n            this.scheduleReconnect();\n        }\n    }\n    handleWebSocketError(error) {\n        var _this_ws;\n        console.error('WebSocket error:', error);\n        (_this_ws = this.ws) === null || _this_ws === void 0 ? void 0 : _this_ws.close();\n        this.ws = null;\n        this.wsReconnectAttempts++;\n        if (this.wsReconnectAttempts >= this.maxWsReconnectAttempts) {\n            console.log('Max WebSocket reconnection attempts reached, disabling WebSocket');\n            this.isWebSocketEnabled = false;\n        } else {\n            this.scheduleReconnect();\n        }\n    }\n    subscribeToUpdates() {\n        var _this_ws;\n        if (((_this_ws = this.ws) === null || _this_ws === void 0 ? void 0 : _this_ws.readyState) === (ws__WEBPACK_IMPORTED_MODULE_0___default().OPEN)) {\n            console.log('Subscribing to aircraft updates');\n            this.ws.send(JSON.stringify({\n                type: 'subscribe',\n                filters: {\n                    states: true\n                }\n            }));\n        }\n    }\n    scheduleReconnect() {\n        if (!this.reconnectTimeout && this.isWebSocketEnabled) {\n            this.reconnectTimeout = setTimeout(()=>{\n                console.log('Attempting to reconnect WebSocket...');\n                this.initWebSocket();\n            }, WS_RECONNECT_DELAY);\n        }\n    }\n    broadcastPositions(positions) {\n        if (!this.isWebSocketEnabled) return;\n        const message = JSON.stringify(positions);\n        this.wsClients.forEach((client)=>{\n            if (client.readyState === (ws__WEBPACK_IMPORTED_MODULE_0___default().OPEN)) {\n                try {\n                    client.send(message);\n                } catch (error) {\n                    console.error('Error broadcasting to client:', error);\n                }\n            }\n        });\n    }\n    updateCache(positions) {\n        try {\n            const cachedData = this.cache.get('positions') || {};\n            const updatedData = {\n                ...cachedData,\n                ...positions\n            };\n            this.cache.set('positions', updatedData);\n        } catch (error) {\n            console.error('Error updating cache:', error);\n        }\n    }\n    transformStateToPosition(state) {\n        if (!state || !state[ICAO24_INDEX]) return null;\n        const icao24 = state[ICAO24_INDEX];\n        const longitude = parseFloat(state[LONGITUDE_INDEX]);\n        const latitude = parseFloat(state[LATITUDE_INDEX]);\n        const altitude = parseFloat(state[ALTITUDE_INDEX]);\n        const velocity = parseFloat(state[VELOCITY_INDEX]);\n        const heading = parseFloat(state[HEADING_INDEX]);\n        const on_ground = Boolean(state[ON_GROUND_INDEX]);\n        const last_contact = parseInt(state[LAST_CONTACT_INDEX]);\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return null;\n        }\n        return {\n            icao24,\n            longitude: isNaN(longitude) ? undefined : longitude,\n            latitude: isNaN(latitude) ? undefined : latitude,\n            altitude: isNaN(altitude) ? undefined : altitude,\n            velocity: isNaN(velocity) ? undefined : velocity,\n            heading: isNaN(heading) ? undefined : heading,\n            on_ground,\n            last_contact: isNaN(last_contact) ? undefined : last_contact\n        };\n    }\n    async getPositions(icao24List) {\n        if (!icao24List.length) {\n            return {};\n        }\n        return this.retryOperation(async ()=>{\n            try {\n                console.log('Fetching positions for:', icao24List.length, 'aircraft');\n                const config = {};\n                if (this.username && this.password) {\n                    config.auth = {\n                        username: this.username,\n                        password: this.password\n                    };\n                }\n                const chunkSize = 100;\n                const positions = {};\n                for(let i = 0; i < icao24List.length; i += chunkSize){\n                    const chunk = icao24List.slice(i, i + chunkSize);\n                    const formattedIcaos = chunk.map((icao)=>icao.toLowerCase()).join(',');\n                    const endpoint = this.getCurrentEndpoint();\n                    console.log(\"Fetching from \".concat(endpoint, \" (chunk \").concat(i / chunkSize + 1, \"/\").concat(Math.ceil(icao24List.length / chunkSize), \")\"));\n                    try {\n                        var _response_data;\n                        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(endpoint, \"/states/all?icao24=\").concat(formattedIcaos), config);\n                        if ((_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.states) {\n                            response.data.states.forEach((state)=>{\n                                const position = this.transformStateToPosition(state);\n                                if (position) {\n                                    positions[position.icao24] = position;\n                                }\n                            });\n                        }\n                        // Briefly check cache for any additional positions\n                        const cachedData = this.cache.get('positions') || {};\n                        chunk.forEach((icao24)=>{\n                            if (!positions[icao24] && cachedData[icao24]) {\n                                positions[icao24] = cachedData[icao24];\n                            }\n                        });\n                    } catch (error) {\n                        console.error(\"Error fetching chunk \".concat(i / chunkSize + 1, \":\"), error);\n                    }\n                    // Add a small delay between chunks\n                    if (i + chunkSize < icao24List.length) {\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                    }\n                }\n                console.log('Retrieved positions for:', Object.keys(positions).length, 'aircraft');\n                return positions;\n            } catch (error) {\n                console.error('Error fetching aircraft positions:', error);\n                return {};\n            }\n        });\n    }\n    addClient(ws) {\n        if (!this.isWebSocketEnabled) return;\n        this.wsClients.add(ws);\n        ws.on('close', ()=>{\n            this.wsClients.delete(ws);\n        });\n    }\n    removeClient(ws) {\n        if (!this.isWebSocketEnabled) return;\n        this.wsClients.delete(ws);\n    }\n    constructor(){\n        this.ws = null;\n        this.wsClients = new Set();\n        this.reconnectTimeout = null;\n        this.currentEndpointIndex = 0;\n        this.wsReconnectAttempts = 0;\n        this.maxWsReconnectAttempts = 5;\n        this.cache = new (node_cache__WEBPACK_IMPORTED_MODULE_1___default())({\n            stdTTL: 15\n        });\n        this.username = process.env.NEXT_PUBLIC_OPENSKY_USERNAME || '';\n        this.password = process.env.NEXT_PUBLIC_OPENSKY_PASSWORD || '';\n        const hasCredentials = Boolean(this.username && this.password);\n        console.log('OpenSky credentials available:', hasCredentials);\n        this.isWebSocketEnabled = hasCredentials;\n        if (this.isWebSocketEnabled) {\n            console.log('Attempting WebSocket connection...');\n            this.initWebSocket();\n        } else {\n            console.log('Using REST API only mode');\n        }\n    }\n}\nconst openSkyService = new OpenSkyService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/opensky.ts\n"));

/***/ })

});